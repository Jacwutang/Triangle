{"version":3,"sources":["components/calculator/util/validation.js","components/calculator/calculator.js","components/app/app.js","index.js"],"names":["validateSide","side","isNaN","error","valid","parseFloat","Calculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","side_one","side_two","side_three","handleChange","bind","assertThisInitialized","event","target","name","val","value","setState","defineProperty","_this$state","_len","arguments","length","sides","Array","_key","every","validateAllSides","determineType","react_default","a","createElement","className","type","onChange","placeholder","renderErrors","calculate","Component","App","calculator_calculator","ReactDOM","render","app_app","document","getElementById"],"mappings":"wSAWaA,SAAe,SAAAC,GAE1B,OAAIC,MAAMD,GACD,CACLE,MAdyB,wBAezBC,OAAO,GAKEC,WAAWJ,IACV,EACL,CACLE,MAtB8B,+BAuB9BC,OAAO,GAIF,CACLD,MAAO,GACPC,OAAO,KC2EEE,cAtGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAU,GACVC,SAAU,GACVC,WAAY,IAEdV,EAAKW,aAAeX,EAAKW,aAAaC,KAAlBX,OAAAY,EAAA,EAAAZ,QAAAY,EAAA,EAAAZ,CAAAD,KAPHA,4EAWNc,GACX,IAAIrB,EAAOqB,EAAMC,OAAOC,KACpBC,EAAMH,EAAMC,OAAOG,MACvBf,KAAKgB,SAALlB,OAAAmB,EAAA,EAAAnB,CAAA,GACGR,EAAOwB,wCAKA,IAAAI,EAC+BlB,KAAKI,MAAxCC,EADIa,EACJb,SAAUC,EADNY,EACMZ,SAAUC,EADhBW,EACgBX,WAM1B,ODM4B,WAAc,QAAAY,EAAAC,UAAAC,OAAVC,EAAU,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAVF,EAAUE,GAAAJ,UAAAI,GAC5C,OAAOF,EAAMG,MAAM,SAAAnC,GAAI,OAAIA,EAAO,GAAKD,EAAaC,GAAMG,QCPrDiC,CALHrB,EAAWX,WAAWW,GACtBC,EAAWZ,WAAWY,GACtBC,EAAab,WAAWa,IDaC,SAACF,EAAUC,EAAUC,GAChD,OACEF,EAAWC,EAAWC,GACtBD,EAAWD,EAAWE,GACtBA,EAAaF,EAAWC,EAxCA,eA2CfD,IAAaC,GAAYD,IAAaE,EA1CxB,cA6CvBF,IAAaC,GACbD,IAAaE,GACbD,IAAaC,EA7CO,WADD,UCyBVoB,CAActB,EAAUC,EAAUC,GAGlC,wCAKEjB,GAEX,OADgBA,EAAOD,EAAaW,KAAKI,MAAMd,IAAOE,MAAQ,oCAK9D,OACEoC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLnB,KAAK,WACLE,MAAOf,KAAKI,MAAMC,SAClB4B,SAAUjC,KAAKQ,aACf0B,YAAY,WAEdN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZ,IACA/B,KAAKmC,aAAa,YAAa,MAIpCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLnB,KAAK,WACLE,MAAOf,KAAKI,MAAME,SAClB2B,SAAUjC,KAAKQ,aACf0B,YAAY,WAEdN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZ,IACA/B,KAAKmC,aAAa,YAAa,MAIpCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLnB,KAAK,aACLE,MAAOf,KAAKI,MAAMG,WAClB0B,SAAUjC,KAAKQ,aACf0B,YAAY,WAEdN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACZ,IACA/B,KAAKmC,aAAa,cAAe,OAKxCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,6BAEEF,EAAAC,EAAAC,cAAA,gBAAQ9B,KAAKoC,YAAb,eA/FaC,aCYVC,mLATX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAACS,EAAD,cALUF,aCClBG,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.734ca821.chunk.js","sourcesContent":["/* Define error messages */\nexport const NON_NUMERIC_VAL = \"Enter a numeric value\";\nexport const NEGATIVE_OR_ZERO_VAL = \"Enter a value greater than 0\";\n\n/* Define triangle types */\nexport const NOT_POSSIBLE = \"NOT POSSIBLE\";\nexport const EQUILATERAL = \"EQUILATERAL\";\nexport const SCALENE = \"SCALENE\";\nexport const ISOCELES = \"ISOCELES\";\n\n/* Returns an error message if input is invalid */\nexport const validateSide = side => {\n  /* NaN types */\n  if (isNaN(side)) {\n    return {\n      error: NON_NUMERIC_VAL,\n      valid: false\n    }\n  }\n\n  /* Numeric type */\n  let length = parseFloat(side);\n  if (length <= 0) {\n    return {\n      error: NEGATIVE_OR_ZERO_VAL,\n      valid: false\n\n    };\n  } else {\n    return {\n      error: \"\",\n      valid: true\n    }\n  }\n};\n\n/* Returns whether or not all sides are valid */\nexport const validateAllSides = (...sides) => {\n  return sides.every(side => side > 0 && validateSide(side).valid);\n};\n\nexport const determineType = (side_one, side_two, side_three) => {\n  if (\n    side_one > side_two + side_three ||\n    side_two > side_one + side_three ||\n    side_three > side_one + side_two\n  ) {\n    return NOT_POSSIBLE;\n  } else if (side_one === side_two && side_one === side_three) {\n    return EQUILATERAL;\n  } else if (\n    side_one === side_two ||\n    side_one === side_three ||\n    side_two === side_three\n  ) {\n    return ISOCELES\n  } else {\n    return SCALENE;\n  }\n};\n","import React, { Component } from \"react\";\nimport \"./calculator.css\";\nimport { validateSide, validateAllSides, determineType } from \"./util/validation\";\nclass Calculator extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      side_one: \"\",\n      side_two: \"\",\n      side_three: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /* Determine corresponding input to update w/ value */\n  handleChange(event) {\n    let side = event.target.name;\n    let val = event.target.value;\n    this.setState({\n      [side]: val\n    });\n  }\n\n  /* Calls utility methods */\n  calculate() {\n    let { side_one, side_two, side_three } = this.state;\n    side_one = parseFloat(side_one);\n    side_two = parseFloat(side_two);\n    side_three = parseFloat(side_three);\n\n    /* Proceed to calculation only when all sides are valid inputs */\n    if(validateAllSides(side_one, side_two, side_three)) {\n      return determineType(side_one, side_two, side_three);\n    }\n    else {\n      return \"\";\n    }\n  }\n\n  /* Render validation errors */\n  renderErrors(side) {\n    let error_msg = side ? validateSide(this.state[side]).error : \"\";\n    return error_msg;\n  }\n\n  render() {\n    return (\n      <div className=\"calc_container\">\n        <div className=\"inputs_container\">\n          <div className=\"side_container\">\n            <h3> Side 1 </h3>\n            <input\n              type=\"text\"\n              name=\"side_one\"\n              value={this.state.side_one}\n              onChange={this.handleChange}\n              placeholder=\"Side 1\"\n            />\n            <div className=\"error_display\">\n              {\" \"}\n              {this.renderErrors(\"side_one\")}{\" \"}\n            </div>\n          </div>\n\n          <div className=\"side_container\">\n            <h3> Side 2 </h3>\n            <input\n              type=\"text\"\n              name=\"side_two\"\n              value={this.state.side_two}\n              onChange={this.handleChange}\n              placeholder=\"Side 2\"\n            />\n            <div className=\"error_display\">\n              {\" \"}\n              {this.renderErrors(\"side_two\")}{\" \"}\n            </div>\n          </div>\n\n          <div className=\"side_container\">\n            <h3> Side 3 </h3>\n            <input\n              type=\"text\"\n              name=\"side_three\"\n              value={this.state.side_three}\n              onChange={this.handleChange}\n              placeholder=\"Side 3\"\n            />\n            <div className=\"error_display\">\n              {\" \"}\n              {this.renderErrors(\"side_three\")}{\" \"}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"results_container\">\n          <h2>\n            The Triangle is:\n            <mark> {this.calculate()} </mark>\n          </h2>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React, { Component } from \"react\";\nimport \"./app.css\";\nimport Calculator from \"../calculator/calculator\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <h1> Triangle Checker </h1>\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}